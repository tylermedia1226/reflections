Q1) What happens when you initialize a repository? Why do you need to do it?

It creates a way to track changes to files in the repository with commits. This allows
us to use git to track changes and revert to older version of a file.

Q2) How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The staging area is a temporary "home" for files you would like to commit. It's not a
repository because it doesn't track the commits and it's not a working directory, since
you don't run files from the staging area. It allows you to have multiple files in a 
single commit.

Q3) How can you use the staging area to make sure you have one commit per logical change?

The staging area allows you to compare the changes (across files if necessary) before
committing them. This allows you to review the changes and make sure there is one commit
per logical change.

Q4) What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

When you want to try or experiment with new features or if you want to create two versions
of a file. This will allow you to experiment and make a lot of changes know you can go 
back to where you diverged from the original, master, file. 

Q5) How do the diagrams help you visualize the branch structure?

It allows you to visualize all the branches and keep track of where the commits and
changes are occuring. This can be very helpful when multiple people are working on a 
single project.

Q6) What is the result of merging two branches together? 
Why do we represent it in the diagram the way we do?

It allows you to take changes made in separate branches and combine them into a single
branch with all commits. This new merged branch will have all the commits from each
individual branch. 

Q7) What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The git merging allows you to track any conflicts in the code and address them as you 
see fit. 
